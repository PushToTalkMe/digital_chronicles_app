import React, {useState, useEffect, useCallback} from 'react'import {useParams, useNavigate} from 'react-router-dom'import {  Box,  Container,  Paper,  Typography,  Chip,  Button,  CircularProgress,  Alert,  Grow,  FormControl,  FormGroup,  FormControlLabel,  Checkbox,  Divider,  IconButton} from '@mui/material'import {grey} from '@mui/material/colors'import apiClient from '../apiClient'import {ChevronLeftOutlined} from '@mui/icons-material'// import {YMap, YMapDefaultSchemeLayer} from '../lib/ymaps'const STATUS_LABELS = {  WAITING: 'Ожидание',  IN_PROCESS: 'В работе',  DONE: 'Завершён'}const STATUS_COLORS = {  WAITING: 'warning',  IN_PROCESS: 'info',  DONE: 'success'}export const FacilityDetailPage = () => {  const {id} = useParams()  const navigate = useNavigate()  const [facility, setFacility] = useState(null)  const [loading, setLoading] = useState(true)  const [error, setError] = useState(null)  const [activating, setActivating] = useState(false)  const [completedItems, setCompletedItems] = useState({})  const [submitting, setSubmitting] = useState(false)  const loadYMap = useCallback(() => {    ymaps.ready(() => {      if (document.querySelector('#map')) {        if (document.querySelector('#map ymaps')) {          document.querySelectorAll('#map ymaps').forEach((el) => {            el.remove()          })        }        if (!document.querySelector('#map ymaps')) {          const OBJECT_MAP = new ymaps.Map('map', {            center: facility.polygon.coordinates[0][0][0],            zoom: 16          })          let polygon_data          if (facility.polygon.coordinates[0].length === 1) {            polygon_data = [facility.polygon.coordinates[0][0]]          } else {            const outer_polygon_coords = facility.polygon.coordinates[0][0]            const inner_polygon_coords = facility.polygon.coordinates[0][1]            polygon_data = [outer_polygon_coords, inner_polygon_coords]          }          console.log(facility)          let polygon = new ymaps.Polygon(            polygon_data,            {              hintContent: 'Полигон объекта',              balloonContentHeader: facility.title,              balloonContentFooter: STATUS_LABELS[facility.status],            },            {              strokeColor: '#121212',              strokeStyle: 'dash',              strokeOpacity: 0.75,              strokeWidth: 1,              interactivityModel: 'default#transparent',              fillColor: '#f43688',              fillOpacity: 0.25,            }          )          OBJECT_MAP.geoObjects.removeAll()          OBJECT_MAP.geoObjects.add(polygon);          OBJECT_MAP.setBounds(polygon.geometry.getBounds());        }      }    })  }, [facility])  useEffect(() => {    const loadFacility = async () => {      try {        setLoading(true)        const res = await apiClient.post(`/facility/${id}`)        setFacility(res.data.data)        setError(null)      } catch (err) {        setError('Не удалось загрузить объект')        console.error(err)      } finally {        setLoading(false)      }    }    loadFacility()  }, [id])  useEffect(() => {    loadYMap()  }, [facility])  const handleActivate = async () => {    if (!window.confirm('Активировать объект и начать работы?')) return    try {      setActivating(true)      await apiClient.post(`/facility/activate/${id}`)      const res = await apiClient.get(`/facility/${id}`)      setFacility(res.data.data)    } catch (err) {      alert('Не удалось активировать объект')      console.error(err)    } finally {      setActivating(false)    }  }  if (loading) {    return (      <Container sx={{py: 4, display: 'flex', justifyContent: 'center'}}>        <CircularProgress/>      </Container>    )  }  if (error || !facility) {    return (      <Container sx={{py: 4}}>        <Alert severity={'error'}>{error || 'Объект не найден'}</Alert>      </Container>    )  }  const items = facility.actOfOpening?.checkList?.items || []  const mainItems = items.filter(item => !item.parentId)  const grouped = items.reduce((acc, item) => {    if (item.parentId) {      if (!acc[item.parentId]) acc[item.parentId] = []      acc[item.parentId].push(item)    }    return acc  }, {})  const allItems = items.map(item => item.id)  const isAllCompleted = allItems.length > 0 && allItems.every(id => completedItems[id] === true)  const handleToggle = (id) => {    setCompletedItems(prev => ({      ...prev,      [id]: !prev[id]    }))  }  const handleSubmit = async () => {    if (!isAllCompleted) return    if (!window.confirm('Отправить акт открытия?')) return    try {      setSubmitting(true)      const subitems = items.map(item => ({        id: item.id,        completed: completedItems[item.id] ? 'YES' : 'NO'      }))      console.log(subitems)      await apiClient.post(`/facility/sendActOfOpening/${facility.id}/`, {        'subitems': subitems      })      alert('Акт открытия успешно отправлен!')    } catch (err) {      alert('Ошибка при отправке акта: ' + (err.response?.data?.message || 'неизвестная ошибка'))      console.error(err)    } finally {      setSubmitting(false)    }  }  return (    <Grow in>      <Container sx={{py: 2}}>        <Paper sx={{p: 2}}>          <Box sx={{display: 'flex', gap: 1, mb: 2, alignItems: 'center'}}>            <IconButton              size={'small'}              sx={{                display:                  {                    xs: 'none',                    sm: 'flex'                  }              }}              onClick={() => {                if (!window.history.length) {                  navigate('/');                } else {                  navigate(-1);                }              }}            >              <ChevronLeftOutlined/>            </IconButton>            <Typography variant={'h5'} fontWeight={'bold'}>              {facility.title}            </Typography>          </Box>          <Box sx={{display: 'flex', gap: 1, mb: 2, flexWrap: 'wrap'}}>            <Chip              label={STATUS_LABELS[facility.status] || facility.status}              color={STATUS_COLORS[facility.status] || 'default'}              size={'small'}              variant={'outlined'}            />          </Box>          <Box sx={{display: 'flex', gap: 1, mb: 2, flexWrap: 'wrap'}}>            <Chip              label={`Создано: ${new Date(facility.createdAt).toLocaleDateString('ru-RU')}`}              color={'default'}              size={'small'}              variant={'outlined'}            />            <Chip              label={`Начало работ: ${new Date(facility.plannedStartAt).toLocaleDateString('ru-RU')}`}              color={'warning'}              size={'small'}              variant={'outlined'}            />            <Chip              label={`Обновлено: ${new Date(facility.updatedAt).toLocaleDateString('ru-RU')}`}              color={'success'}              size={'small'}              variant={'outlined'}            />          </Box>          <Box            sx={{              width: '100%',              height: 600,              mb: 2            }}            id={'map'}          />          <Button            onClick={loadYMap}            color={'primary'}            sx={{mb: 2}}            fullWidth          >            Сбросить карту          </Button>          {/* Кнопка активации (только для WAITING) */}          {facility.status === 'WAITING' && !facility.actOfOpening && (            <Button              variant={'contained'}              color={'primary'}              onClick={handleActivate}              disabled={activating}              fullWidth              sx={{mb: 2}}            >              {activating ? 'Активация...' : 'Активировать объект'}            </Button>          )}          {/* Чек-лист */}          {facility.actOfOpening?.checkList && (            <Box sx={{mt: 2}}>              <Divider sx={{my: 3}}/>              <Typography                variant={'body1'}                color={facility.actOfOpening?.status === 'WAITING_APPROVE' ? grey[500] : 'default'}                gutterBottom              >                {facility.actOfOpening.checkList.title}              </Typography>              <FormControl component={'fieldset'} fullWidth>                <FormGroup>                  {mainItems.map((main) => (                    <Box key={main.id} sx={{mb: 1}}>                      <FormControlLabel                        control={                          <Checkbox                            checked={!!completedItems[main.id] || facility.actOfOpening.status === 'WAITING_APPROVE'}                            onChange={() => handleToggle(main.id)}                            disabled={facility.actOfOpening.status === 'WAITING_APPROVE'}                          />                        }                        label={main.text}                      />                      {main.description && (                        <Typography variant={'caption'} sx={{ml: 4}}>                          {main.description}                        </Typography>                      )}                      {/* Подвопросы */}                      {(grouped[main.id] || []).map((sub) => (                        <Box key={sub.id} sx={{ml: 4, mt: 0.5}}>                          <FormControlLabel                            control={                              <Checkbox                                checked={!!completedItems[sub.id]}                                onChange={() => handleToggle(sub.id)}                              />                            }                            label={sub.text}                          />                          {sub.description && (                            <Typography variant={'caption'}>                              {sub.description}                            </Typography>                          )}                        </Box>                      ))}                    </Box>                  ))}                </FormGroup>              </FormControl>              {/* Кнопка отправки */}              {facility.status === 'IN_PROCESS' && (                <Button                  variant={'contained'}                  color={'primary'}                  onClick={handleSubmit}                  disabled={!isAllCompleted || submitting}                  fullWidth                  sx={{mt: 2}}                >                  {submitting ? 'Отправка...' : 'Отправить акт открытия'}                </Button>              )}              {facility.status === 'WAITING_APPROVE' && (                <Button                  variant={'contained'}                  disabled={!isAllCompleted || submitting}                  fullWidth                  sx={{mt: 2}}                >                  {submitting ? 'Отправка...' : 'Ожидание подтверждения'}                </Button>              )}            </Box>          )}        </Paper>      </Container>    </Grow>  )}