import React, {useState, useEffect, useCallback} from 'react'import {useParams, useNavigate} from 'react-router-dom'import {  Box,  Container,  Paper,  Typography,  Chip,  Button,  CircularProgress,  Alert,  Grow,  FormControl,  FormGroup,  FormControlLabel,  Checkbox,  Divider,  IconButton,  DialogContent,  DialogContentText,  DialogActions,  Dialog,  Snackbar,  Tab, Grid} from '@mui/material'import {TabContext, TabList, TabPanel} from '@mui/lab'import {grey} from '@mui/material/colors'import apiClient from '../apiClient'import {ChevronLeftOutlined} from '@mui/icons-material'// import {YMap, YMapDefaultSchemeLayer} from '../lib/ymaps'const STATUS_LABELS = {  WAITING: 'Ожидание',  IN_PROCESS: 'В работе',  DONE: 'Завершён'}const STATUS_COLORS = {  WAITING: 'warning',  IN_PROCESS: 'info',  DONE: 'success'}const MEASUREMENT_LABELS = {  RUNNING_METER: 'м',  SQUARE_METER: 'м²',  PIECE: 'шт'}export const FacilityDetailPage = () => {  const {id} = useParams()  const navigate = useNavigate()  const [facility, setFacility] = useState(null)  const [loading, setLoading] = useState(true)  const [error, setError] = useState(null)  const [activating, setActivating] = useState(false)  const [completedItems, setCompletedItems] = useState({})  const [submitting, setSubmitting] = useState(false)  const [sbOpen, setSbOpen] = useState(false)  const [sbColor, setSbColor] = useState('success')  const [sbMessage, setSbMessage] = useState('')  const [dOpen, setDOpen] = useState(false)  const [dContent, setDContent] = useState('')  const [dApplyText, setDApplyText] = useState('')  const [submitted, setSubmitted] = useState(false)  const [currentAction, setCurrentAction] = useState('')  const [tab, setTabValue] = useState('1')  const loadFacility = useCallback(async () => {    try {      setLoading(true)      const res = await apiClient.post(`/facility/${id}`)      setFacility(res.data.data)      setError(null)    } catch (err) {      if (err.code === 'ERR_BAD_REQUEST') {        setError('У Вас нет доступа к этому объекту');      } else {        setError('Не удалось загрузить объект');      }    } finally {      setLoading(false)    }  }, [id])  const loadYMap = useCallback(() => {    ymaps.ready(() => {      if (document.querySelector('#map')) {        if (document.querySelector('#map ymaps')) {          document.querySelectorAll('#map ymaps').forEach((el) => {            el.remove()          })        }        if (!document.querySelector('#map ymaps')) {          const OBJECT_MAP = new ymaps.Map('map', {            center: facility.polygon.coordinates[0][0][0],            zoom: 16          })          let polygon_data          if (facility.polygon.coordinates[0].length === 1) {            polygon_data = [facility.polygon.coordinates[0][0]]          } else {            const outer_polygon_coords = facility.polygon.coordinates[0][0]            const inner_polygon_coords = facility.polygon.coordinates[0][1]            polygon_data = [outer_polygon_coords, inner_polygon_coords]          }          console.log(facility)          let polygon = new ymaps.Polygon(            polygon_data,            {              hintContent: 'Полигон объекта',              balloonContentHeader: facility.title,              balloonContentFooter: STATUS_LABELS[facility.status],            },            {              strokeColor: '#121212',              strokeStyle: 'dash',              strokeOpacity: 0.75,              strokeWidth: 1,              interactivityModel: 'default#transparent',              fillColor: '#f43688',              fillOpacity: 0.25,            }          )          OBJECT_MAP.geoObjects.removeAll()          OBJECT_MAP.geoObjects.add(polygon);          OBJECT_MAP.setBounds(polygon.geometry.getBounds());        }      }    })  }, [facility])  useEffect(() => {    loadFacility()  }, [])  useEffect(() => {    loadYMap()  }, [facility])  if (loading) {    return (      <Container sx={{py: 4, display: 'flex', justifyContent: 'center'}}>        <CircularProgress/>      </Container>    )  }  if (error || !facility) {    return (      <Container sx={{py: 4}}>        <IconButton          size={'small'}          sx={{            display: {              xs: 'none',              sm: 'flex',            },            mb: 2,          }}          onClick={() => {            if (!window.history.length) {              navigate('/');            } else {              navigate(-1);            }          }}        >          <ChevronLeftOutlined/>        </IconButton>        <Alert severity={'error'}>{error || 'Объект не найден'}</Alert>      </Container>    )  }  const items = facility.actOfOpening?.checkList?.items || []  const mainItems = items.filter(item => !item.parentId)  const grouped = items.reduce((acc, item) => {    if (item.parentId) {      if (!acc[item.parentId]) acc[item.parentId] = []      acc[item.parentId].push(item)    }    return acc  }, {})  const allItems = items.map(item => item.id)  const isAllCompleted = allItems.length > 0 && allItems.every(id => completedItems[id] === true)  const handleToggle = (id) => {    setCompletedItems(prev => ({      ...prev,      [id]: !prev[id]    }))  }  const sendAct = async () => {    try {      setSubmitting(true)      const subitems = items.map(item => ({        id: item.id,        completed: completedItems[item.id] ? 'YES' : 'NO'      }))      await apiClient.post(`/facility/sendActOfOpening/${facility.id}/`, {        subitems      })    } catch (err) {      console.error(err)      setDOpen(false)      loadFacility()    } finally {      setSubmitting(false)      setDOpen(false)      setSubmitted(true)      loadFacility()      setSbMessage('Акт успешно отправлен на подтверждение')    }  }  const approveAct = async () => {    try {      setSubmitting(true)      await apiClient.post(`/facility/approveActOfOpening/${facility.id}/`)    } catch (err) {      console.error(err)      setDOpen(false)      loadFacility()    } finally {      setSubmitting(false)      setDOpen(false)      setSubmitted(true)      loadFacility()      setSbOpen(true)      setSbMessage('Акт успешно подтверждён')    }  }  const sbHandleClose = () => {    setSbOpen(false)  }  const handleSubmit = async () => {    if (!isAllCompleted) return    setCurrentAction('actSend')    setDOpen(true)    setDContent('Отправить акт открытия на подтверждение?')    setDApplyText('Отправить акт')  }  const applyHandler = () => {    if (currentAction === 'actSend') {      sendAct()    }    if (currentAction === 'actApprove') {      approveAct()    }  }  const dCloseHandler = () => {    setDOpen(false)  }  const actApprove = () => {    setCurrentAction('actApprove')    setDOpen(true)    setDContent('Вы действительно хотите подтвердить акт открытия?')    setDApplyText('Подтвердить')  }  const tabHandler = (event, newValue) => {    if (newValue === '1') {      loadYMap()    }    setTabValue(newValue);  };  return (    <>      <Dialog        open={dOpen}        onClose={dCloseHandler}        aria-labelledby="alert-dialog-title"        aria-describedby="alert-dialog-description"      >        <DialogContent>          <DialogContentText id="alert-dialog-description">            {dContent}          </DialogContentText>        </DialogContent>        <DialogActions>          <Button onClick={dCloseHandler}>Отмена</Button>          <Button onClick={applyHandler} autoFocus>            {dApplyText}          </Button>        </DialogActions>      </Dialog>      <Snackbar        anchorOrigin={{vertical: 'bottom', horizontal: 'center'}}        open={sbOpen}        autoHideDuration={6000}        onClose={sbHandleClose}      >        <Alert          onClose={sbHandleClose}          severity={'error'}          sx={{width: '100%'}}        >          {sbMessage}        </Alert>      </Snackbar>      <Grow in>        <Container sx={{py: 2}}>          <Paper sx={{p: 2}}>            <TabContext value={tab}>              <Box sx={{borderBottom: 1, borderColor: 'divider'}}>                <TabList onChange={tabHandler} aria-label={'Вкладки объекта'}>                  <Tab label={'Общая информация'} value={'1'}/>                  {facility.listOfWorks.length &&                  <Tab label={'Работы'} value={'2'}/>                  }                </TabList>              </Box>              <TabPanel value={'1'} sx={{p: 0, pt: 2}}>                <Box                  sx={{display: 'flex', gap: 1, mb: 2, alignItems: 'center'}}>                  <IconButton                    size={'small'}                    sx={{                      display:                        {                          xs: 'none',                          sm: 'flex'                        }                    }}                    onClick={() => {                      if (!window.history.length) {                        navigate('/');                      } else {                        navigate(-1);                      }                    }}                  >                    <ChevronLeftOutlined/>                  </IconButton>                  <Typography variant={'h5'} fontWeight={'bold'}>                    {facility.title}                  </Typography>                </Box>                <Box sx={{display: 'flex', gap: 1, mb: 2, flexWrap: 'wrap'}}>                  <Chip                    label={STATUS_LABELS[facility.status] || facility.status}                    color={STATUS_COLORS[facility.status] || 'default'}                    size={'small'}                    variant={'outlined'}                  />                </Box>                <Box sx={{display: 'flex', gap: 1, mb: 2, flexWrap: 'wrap'}}>                  <Chip                    label={`Создано: ${new Date(facility.createdAt).toLocaleDateString('ru-RU')}`}                    color={'default'}                    size={'small'}                    variant={'outlined'}                  />                  <Chip                    label={`Начало работ: ${new Date(facility.plannedStartAt).toLocaleDateString('ru-RU')}`}                    color={'warning'}                    size={'small'}                    variant={'outlined'}                  />                  <Chip                    label={`Обновлено: ${new Date(facility.updatedAt).toLocaleDateString('ru-RU')}`}                    color={'success'}                    size={'small'}                    variant={'outlined'}                  />                </Box>                <Box                  sx={{                    width: '100%',                    height: 600,                    mb: 2                  }}                  id={'map'}                />                <Button                  onClick={loadYMap}                  color={'primary'}                  sx={{mb: 1}}                  fullWidth                >                  Сбросить карту                </Button>                {/* Чек-лист */}                {facility.actOfOpening?.checkList && (                  <Box>                    <Divider sx={{my: 2}}/>                    <Typography                      variant={'body1'}                      color={(facility.actOfOpening.status === 'WAITING_APPROVE' || localStorage.getItem('role') !== 'CUSTOMER') ? grey[500] : 'default'}                      gutterBottom                    >                      {facility.actOfOpening.checkList.title}                    </Typography>                    <FormControl component={'fieldset'} fullWidth>                      <FormGroup>                        {mainItems.map((main) => (                          <Box key={main.id} sx={{mb: 1}}>                            <FormControlLabel                              control={                                <Checkbox                                  checked={!!completedItems[main.id] || (facility.actOfOpening.status === 'WAITING_APPROVE' || localStorage.getItem('role') !== 'CUSTOMER')}                                  onChange={() => handleToggle(main.id)}                                  disabled={(facility.actOfOpening.status === 'WAITING_APPROVE' || localStorage.getItem('role') !== 'CUSTOMER')}                                />                              }                              label={main.text}                            />                            {main.description && (                              <Typography variant={'caption'} sx={{ml: 4}}>                                {main.description}                              </Typography>                            )}                            {/* Подвопросы */}                            {(grouped[main.id] || []).map((sub) => (                              <Box key={sub.id} sx={{ml: 4, mt: 0.5}}>                                <FormControlLabel                                  control={                                    <Checkbox                                      checked={!!completedItems[sub.id]}                                      onChange={() => handleToggle(sub.id)}                                    />                                  }                                  label={sub.text}                                />                                {sub.description && (                                  <Typography variant={'caption'}>                                    {sub.description}                                  </Typography>                                )}                              </Box>                            ))}                          </Box>                        ))}                      </FormGroup>                    </FormControl>                    {/* Кнопка отправки */}                    {(facility.actOfOpening.status === 'IN_PROCESS' && localStorage.getItem('role') === 'CUSTOMER') && (                      <Button                        variant={'contained'}                        color={'primary'}                        onClick={handleSubmit}                        disabled={!isAllCompleted || submitting || submitted}                        fullWidth                        sx={{mt: 2}}                      >                        {submitting ? 'Отправка...' : 'Отправить акт открытия'}                      </Button>                    )}                  </Box>                )}                {(localStorage.getItem('role') === 'TECHNICAL_CUSTOMER' && facility.actOfOpening.status === 'DONE') && (                  <Alert>Акт открытия успешно подтверждён</Alert>                )}                {(localStorage.getItem('role') === 'TECHNICAL_CUSTOMER' && facility.actOfOpening.status === 'IN_PROCESS') && (                  <Alert severity={'warning'}>Акт открытия не был отправлен на                    подтверждение</Alert>                )}                {(                  facility.actOfOpening.status === 'WAITING_APPROVE' &&                  localStorage.getItem('role') === 'CUSTOMER'                ) && (                  <Button                    variant={'contained'}                    disabled                    fullWidth                    sx={{mt: 2}}                  >                    {'Ожидание подтверждения'}                  </Button>                )}                {(                  facility.actOfOpening.status === 'WAITING_APPROVE' &&                  localStorage.getItem('role') === 'TECHNICAL_CUSTOMER'                ) && (                  <Button                    variant={'contained'}                    color={'success'}                    sx={{mt: 2}}                    onClick={actApprove}                    fullWidth                  >                    {'Подтвердить акт'}                  </Button>                )}              </TabPanel>              {facility.listOfWorks.length &&              <TabPanel value={'2'}>                <FormControl component={'fieldset'} fullWidth>                  <FormGroup>                    {facility.listOfWorks.map((work) => (                      <Box key={work.id} sx={{mb: 1}}>                        <Grid container spacing={1} sx={{pt: 1}}>                          <Grid item>                            <Chip                              label={`Начать: ${new Date(work.startAt).toLocaleDateString('ru-RU')}`}                              size={'small'}                              color={'info'}                              variant={'outlined'}                            />                          </Grid>                          <Grid item>                            <Chip                              label={`Завершить к: ${new Date(work.endAt).toLocaleDateString('ru-RU')}`}                              size={'small'}                              color={'warning'}                              variant={'outlined'}                            />                          </Grid>                        </Grid>                        <Grid                          container                          sx={{pt: 2}}                          direction={'column'}                          spacing={1}                        >                          <Grid item>                            <FormControlLabel                              control={                                <Checkbox                                />                              }                              label={`${work.title}, ${work.count} ${MEASUREMENT_LABELS[work.measurement]}`}                            />                          </Grid>                          <Grid item>                            <Button>Отметить выполненным</Button>                          </Grid>                        </Grid>                        <Divider sx={{py: 1}}/>                      </Box>                    ))}                  </FormGroup>                </FormControl>              </TabPanel>              }            </TabContext>          </Paper>        </Container>      </Grow>    </>  )}